name: Flutter CI/CD Pipeline

# When should this run?
on:
  push:
    branches: [ master1 ]  # Run when you push to master1
  pull_request:
    branches: [ master1 ]  # Run when someone creates a pull request

jobs:
  # Job 1: Test the code
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Get your code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Install Flutter
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.0'
        channel: 'stable'
    
    # Step 3: Download dependencies
    - name: Install dependencies
      run: flutter pub get
    
    # Step 4: Check code formatting (auto-fix)
    - name: Check formatting
      run: dart format .
    
    # Step 5: Analyze code for issues (allow warnings)
    - name: Analyze code
      run: flutter analyze --no-fatal-warnings
      continue-on-error: true
    
    # Step 6: Run tests (if you have any)
    - name: Run tests
      run: flutter test
      continue-on-error: true

  # Job 2: Build Android App (only if tests pass)
  build-android:
    name: Build Android
    needs: test  # Wait for test job to complete
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master1'  # Only on master1 branch
    timeout-minutes: 30  # Increase timeout
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.0'
        channel: 'stable'
    
    - name: Setup Java (needed for Android)
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'  # Changed from 21 to 17 for better compatibility
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Clean build
      run: flutter clean
    
    - name: Build APK with more memory
      run: |
        export GRADLE_OPTS="-Xmx2048m -Dorg.gradle.daemon=false"
        flutter build apk --release --verbose
    
    - name: Verify APK exists
      run: ls -la build/app/outputs/flutter-apk/
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release-apk
        path: build/app/outputs/flutter-apk/app-release.apk
